# git pks
000.git intro

================================================================================
000.git intro
    - github account 생성 
    - cmd line (최초 실행시)
        git init    => Initialized empty Git repository in D:/WinUt/XDG/.git/
        git add nvim/_vimrc
        git config --global user.email "sunddol@gmail.com"
        git config --global user.name "sunddol"
        git commit -m "first commit 입니다"
        git remote add origin https://github.com/sunddol/vim.git
        git push -u origin master
            Enumerating objects: 4, done.
            Counting objects: 100% (4/4), done.
            Delta compression using up to 4 threads.
            Compressing objects: 100% (2/2), done.
            Writing objects: 100% (4/4), 4.45 KiB | 2.22 MiB/s, done.
            Total 4 (delta 0), reused 0 (delta 0)
            To https://github.com/sunddol/vim.git
             * [new branch]      master -> master
            Branch 'master' set up to track remote branch 'master' from 'origin'.
        git pull origin master  (가져올때)

    - https://rogerdudler.github.io/git-guide/index.ko.html
    - git clone (저장소 받아오기)
        git clone /로컬/저장소/경로     (로컬 저장소 복제-clone)
        git clone 사용자명@호스트:/원격/저장소/경로     (원견 서버 저장조 복제)
    - 로컬 저장소 구조
        첫번째나무 : 작업 디렉토리(working dir) - 실제 파일
        두번째나무 : 인덱스index - 준비 영역 (staging area)
        세번째나무 : Head - 최종 확정본 (commit)
        working dir -----> index --------> head
                     add          commit
    - 추가와 (add) 확정 (commit)
        git add <파일이름>                      => 인덱스에 추가
        git add *
        git commit -m "확정본에 대한 설명"      => Head 에 변경 내용 확정
    - 변경 내용 발행 (push) - 원격 서버 반영
        git remote add origin <원격 서버 주소>
        git push origin master
    - 가지 치기 (branch)
        git checkout -b branch_a        => branch 만들기
        git checkout master             => master 가지로 돌아오기
        git branch -d branch_a          => branch 삭제
        git push origin <branch 이름>   => 원격 저장소 전송
    - 갱신과 병합 (merge)
        git pull        => 로컬 저장소를 원격 저장소에 맞게 갱신
                           이렇게 하면 원격 저장소의 변경 내용이 로컬 작업 디렉토리에
                           받아지고(fetch), 병합(merge)된답니다
        git merge <branch name>     => 다른 가지에 있는 변경 내용을 현재 가지에 병합
        git add <file 이름>         => 충돌(conflict) 시  개별 파일 병합
        git diff <원래 가지> <비교할 가지>      => 병합 전후 비교
    - 꼬리표 달기 (tag)
        git tag 1.0.0 1b2e1d63ff        => 새로운 꼬리표 달기 1.0.0
        git log                         => 확정본 식별자 확인 (ex:1b2e1d63f)
    - 로컬 변경 내용 되돌리기
        git checkout -- <파일 이름>     => 로컬 변경 내용 되돌리기
                                           로컬의 변경 내용을 변경 전 상태(HEAD)로 되돌려줘요
                                           다만, 이미 인덱스에 추가된 변경 내용과
                                           새로 생성한 파일은 그대로 남는답니다.
    - 로컬에 있는 모든 변경 내용과 확정본 포기
      원격 저장소의 최신 이력을 가져오고 로컬 master 가지가 저 이력을 가리키도록 할 수 있어요
        git fetch origin
        git reset --hard origin/master
    - 기타
        gitk : git 의 내장 GUI
        git config color.ui true : 콘솔에서 git output을 컬러로 출력하기
        git config format.pretty oneline : 이력(log)에서 확정본 1개를 딱 한 줄로만 표시하기
        git add -i : 파일을 추가할 때 대화식으로 추가하기
         
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================

